import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = "7953725237:AAFZeMbOle0Mv1Ik_DZbmsHlOP-74teNWmY"

bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule")],
    [InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news")],
    [InlineKeyboardButton(text="üìù –°–µ—Å—Å–∏—è", callback_data="session")],
    [InlineKeyboardButton(text="üìç –ê–¥—Ä–µ—Å–∞", callback_data="addresses")],
])

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
group_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="22-–ò–ë-1-1", callback_data="group_22-–ò–ë-1-1")],
    [InlineKeyboardButton(text="22-–ò–ë-1-2", callback_data="group_22-–ò–ë-1-2")],
    [InlineKeyboardButton(text="22-–ò–ë-1-3", callback_data="group_22-–ò–ë-1-3")],
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")],
])

# –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –Ω–æ–≤–æ—Å—Ç–µ–π, —Å–µ—Å—Å–∏–∏ –∏ –∞–¥—Ä–µ—Å–æ–≤
schedule_data = {
    "22-–ò–ë-1-1": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã 22-–ò–ë-1-1:\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n–í—Ç–æ—Ä–Ω–∏–∫: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n–°—Ä–µ–¥–∞: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
    "22-–ò–ë-1-2": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã 22-–ò–ë-1-2:\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: –§–∏–∑–∏–∫–∞\n–í—Ç–æ—Ä–Ω–∏–∫: –ò—Å—Ç–æ—Ä–∏—è\n–°—Ä–µ–¥–∞: –•–∏–º–∏—è",
    "22-–ò–ë-1-3": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã 22-–ò–ë-1-3:\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞\n–í—Ç–æ—Ä–Ω–∏–∫: –≠–∫–æ–Ω–æ–º–∏–∫–∞\n–°—Ä–µ–¥–∞: –§–∏–ª–æ—Å–æ—Ñ–∏—è",
}
news_data = """
–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ö–ì–¢–£:
1. –í —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –ø—Ä–æ—à–ª–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –ø–æ IT.
2. –û—Ç–∫—Ä—ã—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é.
3. –í –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–æ–≤—ã–µ –∫–Ω–∏–≥–∏ –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É.
"""
session_data = "–î–∞—Ç—ã —Å–µ—Å—Å–∏–π:\n–ó–∏–º–Ω—è—è —Å–µ—Å—Å–∏—è: 15-30 —è–Ω–≤–∞—Ä—è\n–õ–µ—Ç–Ω—è—è —Å–µ—Å—Å–∏—è: 1-15 –∏—é–Ω—è"
addresses_data = """
–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ö–ì–¢–£:
–ê–¥—Ä–µ—Å: —É–ª. –ò–≤–∞–Ω–æ–≤–∞, 10
–¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90
Email: info@kgtu.ru
"""

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}


@dp.message(lambda message: message.text == "/start")
async def start_cmd(message: types.Message):
    user_states[message.from_user.id] = "main_menu"
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)


@dp.callback_query(lambda callback: callback.data == "schedule")
async def show_schedule_menu(callback: types.CallbackQuery):
    user_states[callback.from_user.id] = "schedule_menu"
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=group_menu)


@dp.callback_query(lambda callback: callback.data.startswith("group_"))
async def show_schedule(callback: types.CallbackQuery):
    group = callback.data.split("_")[1]
    schedule = schedule_data.get(group, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    user_states[callback.from_user.id] = f"schedule_{group}"
    await callback.message.edit_text(schedule, reply_markup=group_menu)


@dp.callback_query(lambda callback: callback.data == "news")
async def show_news(callback: types.CallbackQuery):
    if user_states.get(callback.from_user.id) == "news":
        return  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    user_states[callback.from_user.id] = "news"
    await callback.message.edit_text(news_data, reply_markup=main_menu)


@dp.callback_query(lambda callback: callback.data == "session")
async def show_session(callback: types.CallbackQuery):
    if user_states.get(callback.from_user.id) == "session":
        return  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    user_states[callback.from_user.id] = "session"
    await callback.message.edit_text(session_data, reply_markup=main_menu)


@dp.callback_query(lambda callback: callback.data == "addresses")
async def show_addresses(callback: types.CallbackQuery):
    if user_states.get(callback.from_user.id) == "addresses":
        return  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    user_states[callback.from_user.id] = "addresses"
    await callback.message.edit_text(addresses_data, reply_markup=main_menu)


@dp.callback_query(lambda callback: callback.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    user_states[callback.from_user.id] = "main_menu"
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
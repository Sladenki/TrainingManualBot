import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime, timedelta
import random

# –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ constants
from constants import SCHEDULE_22_IB_1_1, SCHEDULE_22_IB_1_2, SCHEDULE_22_IB_1_3, NEWS_DATA, SESSION_DATA, ADDRESSES_DATA, EXTRA_SCHEDULE_DATA

# –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from keyboards import main_menu, group_menu

# –¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞
TOKEN = "7953725237:AAFZeMbOle0Mv1Ik_DZbmsHlOP-74teNWmY"

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ –∏ —Å–æ–±—ã—Ç–∏—è)
logging.basicConfig(level=logging.INFO)


# –î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
schedule_data = {
    "22-–ò–ë-1-1": SCHEDULE_22_IB_1_1,
    "22-–ò–ë-1-2": SCHEDULE_22_IB_1_2,
    "22-–ò–ë-1-3": SCHEDULE_22_IB_1_3,
}

news_data = NEWS_DATA
session_data = SESSION_DATA
addresses_data = ADDRESSES_DATA
extra_schedule_data = EXTRA_SCHEDULE_DATA

# New data structures for additional features
quiz_data = {
    "current_quiz": None,
    "quizzes": [
        {
            "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ Python?",
            "options": ["–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "–ó–º–µ—è", "–ò–≥—Ä–∞", "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"],
            "correct_answer": 0
        },
        {
            "question": "–ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ Python?",
            "options": ["int", "float", "str", "bool"],
            "correct_answer": 2
        },
        {
            "question": "–ö–∞–∫–æ–π —Å–∏–º–≤–æ–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ Python?",
            "options": ["//", "#", "/*", "--"],
            "correct_answer": 1
        }
    ]
}

mood_data = {}  # Dictionary to store user moods

# New function for quiz system
@dp.message(lambda message: message.text == "/quiz" or message.text == "üìù –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def start_quiz(message: types.Message):
    if quiz_data["current_quiz"] is None:
        quiz = random.choice(quiz_data["quizzes"])
        quiz_data["current_quiz"] = quiz
        
        buttons = []
        for i, option in enumerate(quiz["options"]):
            buttons.append([InlineKeyboardButton(
                text=option,
                callback_data=f"quiz_answer_{i}"
            )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await message.answer(
            f"üìù –í–∏–∫—Ç–æ—Ä–∏–Ω–∞:\n\n{quiz['question']}",
            reply_markup=keyboard
        )
    else:
        await message.answer("–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã!")

@dp.callback_query(lambda callback: callback.data.startswith("quiz_answer_"))
async def process_quiz_answer(callback: types.CallbackQuery):
    await callback.answer()
    if quiz_data["current_quiz"] is None:
        await callback.message.answer("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return
    
    answer = int(callback.data.split("_")[-1])
    quiz = quiz_data["current_quiz"]
    
    if answer == quiz["correct_answer"]:
        await callback.message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
    else:
        await callback.message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {quiz['options'][quiz['correct_answer']]}")
    
    quiz_data["current_quiz"] = None
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É",
            callback_data="new_quiz"
        )]
    ])
    await callback.message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=keyboard)

@dp.callback_query(lambda callback: callback.data == "new_quiz")
async def new_quiz(callback: types.CallbackQuery):
    await callback.answer()
    await start_quiz(callback.message)

# New function for mood tracking
@dp.message(lambda message: message.text == "/mood")
async def track_mood(message: types.Message):
    moods = ["üòä", "üòê", "üò¢", "üò°", "üò¥", "ü§î"]
    buttons = []
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(moods), 3):
        row = []
        for mood in moods[i:i+3]:
            row.append(InlineKeyboardButton(
                text=mood,
                callback_data=f"mood_{mood}"
            ))
        buttons.append(row)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–ö–∞–∫ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?", reply_markup=keyboard)

@dp.callback_query(lambda callback: callback.data.startswith("mood_"))
async def process_mood(callback: types.CallbackQuery):
    await callback.answer()
    mood = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    if user_id not in mood_data:
        mood_data[user_id] = []
    
    mood_data[user_id].append({
        "mood": mood,
        "date": datetime.now()
    })
    
    await callback.message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! {mood}")

@dp.callback_query(lambda callback: callback.data == "quiz")
async def quiz_callback(callback: types.CallbackQuery):
    await callback.answer()
    await start_quiz(callback.message)

@dp.callback_query(lambda callback: callback.data == "mood")
async def mood_callback(callback: types.CallbackQuery):
    await callback.answer()
    await track_mood(callback.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(lambda message: message.text == "/start")
async def start_cmd(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
    reply_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)
    await message.answer(reply_markup=reply_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –±–æ–ª—å—à—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
@dp.message(lambda message: message.text == "üì± –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")
async def menu_button(message: types.Message):
    await start_cmd(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@dp.callback_query(lambda callback: callback.data == "schedule")
async def show_schedule_menu(callback: types.CallbackQuery):
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ —Å—Ä–∞–∑—É
    await bot.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=group_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
@dp.callback_query(lambda callback: callback.data.startswith("group_"))
async def show_schedule(callback: types.CallbackQuery):
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    group = callback.data.split("_")[1] # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ callback_data
    schedule = schedule_data.get(group, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    await bot.send_message(callback.from_user.id, schedule)

@dp.callback_query(lambda callback: callback.data == "news")
async def show_news(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(callback.from_user.id, news_data)

@dp.callback_query(lambda callback: callback.data == "session")
async def show_session(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(callback.from_user.id, session_data)

@dp.callback_query(lambda callback: callback.data == "addresses")
async def show_addresses(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(callback.from_user.id, addresses_data)

@dp.callback_query(lambda callback: callback.data == "extra_schedule")
async def show_addresses(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(callback.from_user.id, extra_schedule_data)

@dp.callback_query(lambda callback: callback.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –±–æ—Ç–∞
async def main():
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –±–æ—Ç–∞
    await bot.set_my_commands([
        BotCommand(command="start", description="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand(command="quiz", description="–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"),
        BotCommand(command="mood", description="–û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
    ])
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())
